// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RightWay.Data;

#nullable disable

namespace RightWay.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250716224750_InitialDbSchema")]
    partial class InitialDbSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RightWay.Domain.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Identificador");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<float>("Latitude")
                        .HasColumnType("real")
                        .HasColumnName("latitude")
                        .HasComment("Latitude");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locality")
                        .HasComment("Localidade");

                    b.Property<float>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("longitude")
                        .HasComment("Longitude");

                    b.Property<int>("MunicipalCode")
                        .HasColumnType("integer")
                        .HasColumnName("municipal_code")
                        .HasComment("Código municipal");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neighborhood")
                        .HasComment("Bairro");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number")
                        .HasComment("Número");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasComment("Pedido");

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_place")
                        .HasComment("Logradouro");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region")
                        .HasComment("Região");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id")
                        .HasComment("Rota");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state")
                        .HasComment("Estado");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uf")
                        .HasComment("Estado");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code")
                        .HasComment("CEP");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Identificador");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<string>("DriverLincenseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver_lincense_number")
                        .HasComment("Número da carteira de motorista");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Nome");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone")
                        .HasComment("Telefone");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Identificador");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id")
                        .HasComment("Endereço de entrega");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height")
                        .HasComment("Altura");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority_level")
                        .HasComment("Nível de prioridade");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasComment("Status");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight")
                        .HasComment("Peso");

                    b.HasKey("Id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Identificador");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<Guid>("DepartureAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("departure_address_id")
                        .HasComment("Endereço de partida");

                    b.Property<DateTime>("EstimatedEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimated_end")
                        .HasComment("Data estimada de finalização da rota");

                    b.Property<DateTime>("EstimatedStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimated_start")
                        .HasComment("Data estimada de partida");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasComment("Status");

                    b.Property<float>("TotalDistanceKm")
                        .HasColumnType("real")
                        .HasColumnName("total_distance_km")
                        .HasComment("Total da rota em KM");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id")
                        .HasComment("Veículo que será utilizado");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("route", (string)null);
                });

            modelBuilder.Entity("RightWay.Domain.Entity.RouteOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Identificador");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<int>("DeliveryOrder")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_order")
                        .HasComment("Ordem de entrega");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasComment("Pedido");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id")
                        .HasComment("Rota");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.ToTable("route_order", (string)null);
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Identificador");

                    b.Property<float>("Capacity")
                        .HasColumnType("real")
                        .HasColumnName("capacity")
                        .HasComment("Capacidade do veículo");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id")
                        .HasComment("Motorista");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model")
                        .HasComment("Modelo do veículo");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plate_number")
                        .HasComment("Número da placa");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id")
                        .HasComment("Rota do veículo");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.HasKey("Id");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Address", b =>
                {
                    b.HasOne("RightWay.Domain.Entity.Order", "Order")
                        .WithOne("Address")
                        .HasForeignKey("RightWay.Domain.Entity.Address", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RightWay.Domain.Entity.Route", "Route")
                        .WithOne("DepartureAddress")
                        .HasForeignKey("RightWay.Domain.Entity.Address", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Driver", b =>
                {
                    b.HasOne("RightWay.Domain.Entity.Vehicle", "Vehicle")
                        .WithOne("Driver")
                        .HasForeignKey("RightWay.Domain.Entity.Driver", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Route", b =>
                {
                    b.HasOne("RightWay.Domain.Entity.Vehicle", "Vehicle")
                        .WithOne("Route")
                        .HasForeignKey("RightWay.Domain.Entity.Route", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RightWay.Domain.Entity.RouteOrder", b =>
                {
                    b.HasOne("RightWay.Domain.Entity.Order", "Order")
                        .WithOne()
                        .HasForeignKey("RightWay.Domain.Entity.RouteOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RightWay.Domain.Entity.Route", "Route")
                        .WithMany("Orders")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Order", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Route", b =>
                {
                    b.Navigation("DepartureAddress")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RightWay.Domain.Entity.Vehicle", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Route")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
